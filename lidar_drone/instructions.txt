INSTALLATION:
Pre-req: Have docker installed on a Linux Machine, and give add docker to sudo group

Following [1]
1. Pull docker image
	$ docker pull px4io/px4-dev-ros-melodic
	
2. Create a directory on your PC for volume linking
	i. $ cd
	ii. $ mkdir -p lidar_drone/src 

3. Clone PX4 source code
	i. $ cd ~/lidar_drone/src
	ii. $ git clone https://github.com/PX4/PX4-Autopilot.git
	
4. Create docker_run.sh
	i. $ cd ~/Docker/lidar_drone 
	ii. Create docker_run.sh as per [2]

5. Create docker_exec.sh
	i. $ cd ~/Docker/lidar_drone
	ii. Create docker_run.sh as per [3]
	
6. Create docker_kill.sh
	i. $ cd ~/Docker/lidar_drone
	ii. Create docker_kill.sh as per [4]

7. Start a new container
	In terminal (A):
		i. $ cd ~/lidar_drone
		ii. $ ./docker_run.sh
	Check the container name 
		iii. $ docker ps -a
	The container name should be px4_container
	
	In terminal (B):
		i. $ cd ~/lidar_drone
		ii. $ ./docker_exec.sh
	Now, we should be inside the container, at this path -> /root/lidar_drone
	
8. Build
	i. $ cd ~/lidar_drone/src/PX4-Autopilot
	ii. $ make px4_sitl_default gazebo-classic
	A gazebo world with the iris drone should open. If not, close gazebo and re-run the command. You should see [commander] Ready for takeoff message
	Takeoff-Land for a sanity check.
	iii. commander takeoff
	iv. commander land

9. Configure ROS and MAVROS [6]
	i. $ echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
	Create a catkin workspace for development
	ii. $ mkdir -p ~/lidar_drone/catkin_ws/src
	iii. $ cd ~/lidar_drone/catkin_ws && catkin_make
	iv. $ echo "source ~/lidar_drone/catkin_ws/devel/setup.bash" >> ~/.bashrc
	For ROS wrappers with Gazebo. This allows additional sensors that we add later inside gazebo to publish data on ROS.
	v. $ echo "px4_dir=/root/lidar_drone/src/PX4-Autopilot" >> ~/.bashrc
	vi. $ echo "source $px4_dir/Tools/simulation/gazebo-classic/setup_gazebo.bash $px4_dir $px4_dir/build/px4_sitl_default" >> ~/.bashrc
	vii. $ echo "export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$px4_dir" >> ~/.bashrc
	viii. $ echo "export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$px4_dir/Tools/simulation/gazebo-classic/sitl_gazebo-classic" >> ~/.bashrc
	Refer [7] for additional bashrc for adding models from our ROS package.
	ix. $ source ~/.bashrc
	Sanity check
	x. Close any running gazebo or PX4 instances
	xi. $ roslaunch px4 posix_sitl.launch
	This should open up a Gazebo with PX4 and MAVROS.
	xii. $ pip3 install pyyaml
	xiii. $ pip3 install rospkg
	
10. Create a ROS package [10]

11. Additional VS Code configuration - install C/C++ and ROS extensions.

USAGE:
1. Start a container
	In terminal (A):
		i. $ cd ~/Docker/lidar_drone
		ii. $ ./docker_run.sh
	In terminal (B):
		i. $ cd ~/Docker/lidar_drone
		ii. $ ./docker_exec.sh

2. Run simulation. (Refer [5] for adding worlds, customizations)

	Method 1: 
	i. $ cd ~/lidar_drone/src/PX4-Autopilot
	ii. $ make px4_sitl_default gazebo-classic
	iii. $ roslaunch mavros px4.launch fcu_url:="udp://:14540@127.0.0.1:14557"
	
	Method 2:
	i. $ roslaunch px4 mavros_posix_sitl.launch
	
	Simple takeoff land
	i. commander takeoff
	ii. commander land
	
	


References:
[1] https://docs.px4.io/main/en/test_and_ci/docker.html
[2] github link to run.sh
[3] github link to exec
[4] github link to kill
[5] https://docs.px4.io/main/en/sim_gazebo_classic/
[6] https://docs.px4.io/main/en/simulation/ros_interface.html
[7] https://github.com/vanquish630/pheonix
[8] https://docs.px4.io/main/en/sim_gazebo_classic/multi_vehicle_simulation_gazebo.html
[9] https://docs.px4.io/main/en/ros/ros1.html
[10] https://github.com/yash14s/ROS/blob/main/Notes/ROS%20package.txt 


